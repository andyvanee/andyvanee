<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>andyvanee.com</title>
		<description>Thoughts on Programming, Metaphysics, and anything in between</description>
		<link>http://andyvanee.com</link>
		<atom:link href="http://andyvanee.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>The Software Developers Home Lab</title>
				<description>&lt;p&gt;This post caught my eye: &lt;a href='http://www.theregister.co.uk/2013/02/07/home_lab_career_saver/'&gt;Why you need a home lab to keep your job&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;Your boss won't pay for training, so your partner has to put up with servers at home&lt;/blockquote&gt;
&lt;p&gt;What intrigued me, as a web developer, was not setting up servers with the latest and greatest hardware. It was the question of what exactly the &amp;#8216;Home Lab&amp;#8217; looks like for a web developer. I have a number of things cooking in my home lab but I&amp;#8217;m thinking I really should have more. These are non-paying projects, built for fun or necessesity or just to develop my skills with tools I don&amp;#8217;t use at work. Here&amp;#8217;s a rundown of a couple of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://www.dollhousespa.com'&gt;My wife&amp;#8217;s website&lt;/a&gt;. Wordpress for most, Django for gift certificates. Nginx on EC2.&lt;/li&gt;

&lt;li&gt;&lt;a href='https://github.com/Andyvanee/andyvanee.github.com'&gt;This blog&lt;/a&gt;: Jekyll static site hosted on github&lt;/li&gt;

&lt;li&gt;&lt;a href='http://scrapbook.andyvanee.com'&gt;My scrapbook&lt;/a&gt;: home-brew static site generator in python, hosted on S3&lt;/li&gt;

&lt;li&gt;A little Node app for sharing / publishing lists of links. (also on EC2, but no link at the moment :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a number of notable omissions from this list, and the reason I&amp;#8217;ve omitted them is important (to me, anyway).&lt;/p&gt;

&lt;p&gt;First, I didn&amp;#8217;t include the many throwaway projects &lt;a href='https://github.com/Andyvanee?tab=repositories'&gt;on github&lt;/a&gt; or the ones littering my hard drive. Second, I didn&amp;#8217;t include the tools I use, or the substantial time commitment that&amp;#8217;s involved in learning new tools and frameworks.&lt;/p&gt;

&lt;p&gt;The reason I think it&amp;#8217;s important is that there is a certain pathology that can become nearly all-consuming when working in this field. The pathology is an obsession with methodologies, tools and frameworks at the expense of code that can ship.&lt;/p&gt;

&lt;p&gt;Code that can ship.&lt;/p&gt;

&lt;p&gt;Flamewars about code editors, MVC, TDD, IDE&amp;#8217;s or security mean very little in comparison with deliverables. Refactoring and obsessively polishing are equivalent to premature optimization. One person using your code will educate you just as much, or more, than reading 1000 posts on hacker news.&lt;/p&gt;

&lt;p&gt;No matter what you&amp;#8217;re interests are, whether it be writing, music, art, photography, social work or accounting, your primary focus should always be on your deliverables. Put your work in public. It has never been easier.&lt;/p&gt;

&lt;p&gt;If your interest &lt;em&gt;is&lt;/em&gt; code, get some out in public. When your code is out in public, it represents a committment. The academic debates and hypothetical questions go out the window and you experience the rubber meeting the road. So buy a domain name &lt;a href='https://dnsimple.com/'&gt;DNSimple&lt;/a&gt;. Signup with a web host that can host the kind of apps you want to run (gh-pages, S3, EC2, Rackspace, Heroku, &amp;#8230;).&lt;/p&gt;

&lt;p&gt;Then &lt;strong&gt;ship some code.&lt;/strong&gt;&lt;/p&gt;</description>
				<pubDate>Wed, 06 Feb 2013 00:00:00 -0700</pubDate>
				<link>http://andyvanee.com/2013/02/06/software-home-lab.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2013/02/06/software-home-lab.html</guid>
			</item>
		
			<item>
				<title>Haskell Influenced Coffee</title>
				<description>&lt;p&gt;I&amp;#8217;ve been learning Haskell. It&amp;#8217;s been a very interesting experience to learn to think in the Haskell way, but I have been unsure whether it will actually have any practical benefit in my day to day work.&lt;/p&gt;

&lt;p&gt;Then I switched modes and wrote a little CoffeeScript. The lessons I had been struggling with Haskell suddenly became so clear when applied to CoffeeScript (and JavaScript, by extension). Here&amp;#8217;s a few examples of what I&amp;#8217;m talking about&amp;#8230;&lt;/p&gt;

&lt;h3 id='example_1__callbacks_with_scope'&gt;Example #1 - Callbacks with scope&lt;/h3&gt;

&lt;p&gt;Asynchronous execution is pretty fundamental in modern JavaScript, and callbacks are the way this is usually managed. Sometimes it makes sense to pass small inline anonymous functions in these cases, but other times you want to break the callback into it&amp;#8217;s own named function. The problem that can arise with this is that your function might lose things it previously had in scope.&lt;/p&gt;

&lt;p&gt;Take this example of reading a file asynchronously with node (inside a request):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='coffeescript'&gt;&lt;span class='nv'&gt;handler = &lt;/span&gt;&lt;span class='nf'&gt;(req, res) -&amp;gt;&lt;/span&gt;
  &lt;span class='nx'&gt;fs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;readFile&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;myfile.html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nf'&gt;(err, data) -&amp;gt;&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt;
      &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;ack!&amp;#39;&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt;
    &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Not bad, but those inline functions are essentially untestable and have a tendency to grow in ugly ways. I&amp;#8217;d like to break it into it&amp;#8217;s own named function, but I have a problem: my response handle will go out of scope so I can&amp;#8217;t actually write my response. My Haskell-influenced solution uses a function-returning function and looks surprisingly like a Haskell type signature:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='coffeescript'&gt;&lt;span class='nv'&gt;handler = &lt;/span&gt;&lt;span class='nf'&gt;(req, res) -&amp;gt;&lt;/span&gt;
  &lt;span class='nx'&gt;fs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;readFile&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;myfile.html&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;fileResponder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='nv'&gt;fileResponder = &lt;/span&gt;&lt;span class='nf'&gt;(res) -&amp;gt;&lt;/span&gt; &lt;span class='nf'&gt;(err, data) -&amp;gt;&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;err&lt;/span&gt;
    &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;ack!&amp;#39;&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt;
  &lt;span class='nx'&gt;res&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this is a function that returns a callback function (taking err,data) with the proper response writer in scope. Nice!&lt;/p&gt;

&lt;p&gt;And now, with a minimal mock of res, err and data, it would be nice and easy to test the output of the responder across many inputs.&lt;/p&gt;

&lt;h3 id='example_2__loving_recursion'&gt;Example #2 - Loving Recursion&lt;/h3&gt;

&lt;p&gt;This one is a bit more of a gray area for me. Recursion can be slower and harder to understand for some. I&amp;#8217;ve found that I naturally tend to solve things recursively more since using Haskell. Here&amp;#8217;s a simple example that pads a string with another string up to a certain length. I didn&amp;#8217;t even think, &amp;#8220;I should do this recursively&amp;#8221;, it just came naturally.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='coffeescript'&gt;&lt;span class='c1'&gt;# Pad a string to len using padding&lt;/span&gt;
&lt;span class='nb'&gt;String&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;prototype.pad = &lt;/span&gt;&lt;span class='nf'&gt;(padding, len) -&amp;gt;&lt;/span&gt;
  &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;Argument 1 for pad must me a string&amp;#39;&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;padding&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;string&amp;#39;&lt;/span&gt;
  &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;Argument 2 for pad must be a number&amp;#39;&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;len&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='s'&gt;&amp;#39;number&amp;#39;&lt;/span&gt;
  &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='nx'&gt;@&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;length&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nx'&gt;len&lt;/span&gt; &lt;span class='k'&gt;then&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;padding&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;@&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;pad&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;padding&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;len&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='nx'&gt;@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can change &amp;#8220;7&amp;#8221; to &amp;#8220;007&amp;#8221;, just by doing &lt;code&gt;&amp;quot;7&amp;quot;.pad(&amp;quot;0&amp;quot;, 3)&lt;/code&gt;. Sure, this could have been done just fine with a while or for loop. The thing I like about recursive solutions is that the edge conditions are clearer than in an iterative solution.&lt;/p&gt;

&lt;h3 id='example_3__functional_decomposition'&gt;Example #3 - Functional Decomposition&lt;/h3&gt;

&lt;p&gt;One definite influence of writing Haskell is the size of functions I&amp;#8217;ve been writing. Each function is only a couple lines long and does a single thing. Here&amp;#8217;s an excerpt of some filename processing I did:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='coffeescript'&gt;&lt;span class='c1'&gt;# Convert dashed, lowercase title to proper title&lt;/span&gt;
&lt;span class='nv'&gt;dashToTitleCase = &lt;/span&gt;&lt;span class='nf'&gt;(title) -&amp;gt;&lt;/span&gt;
  &lt;span class='nx'&gt;properCase&lt;/span&gt; &lt;span class='nx'&gt;dashToSpace&lt;/span&gt; &lt;span class='nx'&gt;title&lt;/span&gt;
 
&lt;span class='c1'&gt;# Capitalize each space-separated word in the string&lt;/span&gt;
&lt;span class='nv'&gt;properCase = &lt;/span&gt;&lt;span class='nf'&gt;(xs) -&amp;gt;&lt;/span&gt;
  &lt;span class='nx'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;replace&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
    &lt;span class='sr'&gt;/\w\S*/g&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nf'&gt;(xs) -&amp;gt;&lt;/span&gt; &lt;span class='nx'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;charAt&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;toUpperCase&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;substr&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;toLowerCase&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
  &lt;span class='p'&gt;)&lt;/span&gt;
 
&lt;span class='c1'&gt;# Convert dashes to spaces&lt;/span&gt;
&lt;span class='nv'&gt;dashToSpace = &lt;/span&gt;&lt;span class='nf'&gt;(xs) -&amp;gt;&lt;/span&gt;
  &lt;span class='nx'&gt;xs&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;replace&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='sr'&gt;/-/g&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the past, it&amp;#8217;s quite possible that I wouldn&amp;#8217;t have even created a single function for this, much less three. It&amp;#8217;s only a couple string replacements which wouldn&amp;#8217;t have cluttered up the calling code too much. As it turns out, I was able to use this inside a string interpolation which was much cleaner and more or less self-documenting.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='coffeescript'&gt;&lt;span class='nv'&gt;fileContents = &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;title: &lt;/span&gt;&lt;span class='si'&gt;#{&lt;/span&gt;&lt;span class='nx'&gt;dashToTitleCase&lt;/span&gt; &lt;span class='nx'&gt;postTitle&lt;/span&gt;&lt;span class='si'&gt;}&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Mon, 20 Aug 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/08/20/haskell-influenced-coffee.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/08/20/haskell-influenced-coffee.html</guid>
			</item>
		
			<item>
				<title>Global Virtual Collaboration</title>
				<description>&lt;p&gt;I have a feeling that the current age could be described as the dawn of the open-source model. It&amp;#8217;s not just software that can benefit from a workflow that is distributed, versioned and collaborative. And it&amp;#8217;s not only &amp;#8220;open&amp;#8221; products that benefit from these tools. Here&amp;#8217;s a great example of this at work in the latest Mars rover:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://www.wired.com/design/2012/08/designing-the-curiosity-mars-rover/'&gt;Why Designing a Mars Rover Like Curiosity Just Got a Lot Easier&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8220;Global virtual collaboration&amp;#8221; really stuck out for me. It&amp;#8217;s rather obvious how this enables far more productive engineering teams when put this way. What&amp;#8217;s not always obvious is how and where this workflow really should be introduced in other fields.&lt;/p&gt;</description>
				<pubDate>Wed, 08 Aug 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/08/08/global-virtual-collaboration.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/08/08/global-virtual-collaboration.html</guid>
			</item>
		
			<item>
				<title>Declarative Data</title>
				<description>&lt;p&gt;There seems to be certain mystique surrounding declarative programming and how it applies to the real world. There are not many technologies in the average web programmer toolkit that are truly declarative.&lt;/p&gt;

&lt;p&gt;Config files are declarative, but only in the simplest form. YAML and JSON files are essentially a static view of some state - A manual database that is read in by the &amp;#8216;real&amp;#8217; imperative program.&lt;/p&gt;

&lt;p&gt;CSS files are similarly declarative, but have the imperative cascading effect of overwriting previous declarations.&lt;/p&gt;

&lt;p&gt;And it seems that there is a general consensus among frameworks that SQL is something that every programmer should be sheilded from at any cost. A single SELECT and WHERE may be easy enough, but any nested queries or more complicated logic is just too much to bear.&lt;/p&gt;

&lt;p&gt;Is all this overhead necessary when all I want is a place to store my data?&lt;/p&gt;

&lt;p&gt;This alone is enough to explain the rise of NoSQL in dealing with our data. If there is a simple, fast and flexible way to store data structures - which can nearly always be represented as lists or hashes - why not just do that and avoid the overhead of rigid schemas and strange query languages?&lt;/p&gt;</description>
				<pubDate>Sun, 15 Jul 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/07/15/declarative-data.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/07/15/declarative-data.html</guid>
			</item>
		
			<item>
				<title>Digital Archiving</title>
				<description>&lt;p&gt;&lt;a href='http://blogs.loc.gov/digitalpreservation/2012/05/librarians-helping-their-communities-with-personal-digital-archiving/'&gt;Librarians Helping Their Communities with Personal Digital Archiving&lt;/a&gt;&lt;/p&gt;</description>
				<pubDate>Sat, 16 Jun 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/06/16/digital-archiving.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/06/16/digital-archiving.html</guid>
			</item>
		
			<item>
				<title>Old Projects onto Github Pages</title>
				<description>&lt;p&gt;I&amp;#8217;ve moved my blog over to &lt;a href='http://pages.github.com/'&gt;Github Pages&lt;/a&gt;, and it&amp;#8217;s working out pretty well so far. I&amp;#8217;m using Jekyll to generate it, which works awesome for a simple blog like this.&lt;/p&gt;

&lt;p&gt;And in the spirit of embracing Github Pages, I&amp;#8217;ve made gh-pages branches for a couple of my dusty old projects that would work as static pages.&lt;/p&gt;

&lt;h2 id='skratch'&gt;Skratch&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://andyvanee.com/skratch/'&gt;The App&lt;/a&gt;&lt;br /&gt;&lt;a href='https://github.com/Andyvanee/skratch/tree/master/js'&gt;The Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I built Skratch as a school project, and looking at the code now I&amp;#8217;m actually quite happy with some of the design choices I made. Built in touch handling, localStorage for drawings and a pretty sweet color picker. The drawing code works pretty well too, some pretty funky stuff happening in skratch-tools.js in the pencilDraw and penmove functions.&lt;/p&gt;

&lt;h2 id='alien_quest'&gt;Alien Quest&lt;/h2&gt;

&lt;p&gt;&lt;a href='http://andyvanee.com/AlienQuest/'&gt;The App&lt;/a&gt;&lt;br /&gt;&lt;a href='https://github.com/Andyvanee/AlienQuest'&gt;The Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a fun little game. It&amp;#8217;s more or less just a wireframe of a game but the gameplay is decent, and there&amp;#8217;s a few little treats in there. It was my first and only real project using Prototype, so the code is a bit ugly in places as a result.&lt;/p&gt;</description>
				<pubDate>Thu, 07 Jun 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/06/07/old-projects-and-gh-pages.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/06/07/old-projects-and-gh-pages.html</guid>
			</item>
		
			<item>
				<title>MVC-r The pattern you already use</title>
				<description>&lt;p&gt;&lt;em&gt;The pattern you already use&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;MVC has long been the defacto standard for building web and desktop applications. There are many variations on the theme, but I think the acronym is missing one component that is already an important part of any MVC application&amp;#8230;&lt;/p&gt;

&lt;h2 id='resources'&gt;Resources&lt;/h2&gt;

&lt;p&gt;Call them assets, static files or whatever. A large portion of every application is the stuff that never changes. The reason it&amp;#8217;s missing from the acronym is most likely that developers want to differentiate dynamic code from immutable resources. The real work happens in the code, whereas resources are dumb entities; not really the concern of our smart code.&lt;/p&gt;

&lt;p&gt;Aaron Swartz: Bake, Dont Fry: &lt;a href='http://www.aaronsw.com/weblog/000404'&gt;http://www.aaronsw.com/weblog/000404&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem with this approach is that the lines between static and dynamic resources has become unclear. Most of what was traditionally static content on the web is now generated dynamically and hosted statically (less, coffeescript, markdown, etc), and much of what is now completely dynamic should probably be handled the same way.&lt;/p&gt;

&lt;p&gt;Todays web frameworks do not cater to this type of thinking. The trend is to pull more and more of the content into the realm of the application server and away from the static server. The problem with this is that static servers are &lt;strong&gt;really good&lt;/strong&gt; at what they do. Application servers are less robust for a number of reasons, the main one being &lt;strong&gt;your code&lt;/strong&gt;. No developer wants to hear this, but it&amp;#8217;s simply the truth. Your code (and mine) has bugs. No matter how much testing goes into the application, it will never be as stable as a static resource.&lt;/p&gt;

&lt;p&gt;My suggestion, and the goal of my acronym MVC-r, is to move as much as humanly possible into the realm of compiled static resources. &amp;#8216;MVC&amp;#8217; is capitalized because it&amp;#8217;s big. It takes time, performs serious tasks, and is generally hard work. &amp;#8216;r&amp;#8217; is lowercase and seperated by a dash because it&amp;#8217;s lean, stable and won&amp;#8217;t keep you up at night thinking about edge cases.&lt;/p&gt;

&lt;p&gt;The architecture of this system means that the application should be seperated into discreet components. The average POST request should trigger content generation, query/submit to the database, and generate a compiled resource. The average GET request to the application should return custom data fragments. Everything else should be handled by the static content server.&lt;/p&gt;</description>
				<pubDate>Sun, 15 Apr 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/04/15/mvc-r.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/04/15/mvc-r.html</guid>
			</item>
		
			<item>
				<title>Copy Path to Clipboard</title>
				<description>&lt;p&gt;Finder makes it a bit difficult to get the full path to a file; like when you&amp;#8217;re pasting it into config files or Terminal.&lt;/p&gt;

&lt;p&gt;So here&amp;#8217;s a little script that makes it this easy: Browse in Finder, right click a file or folder and choose &amp;#8216;Copy Path to Clipboard&amp;#8217;.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://d.pr/HdQX'&gt;http://d.pr/HdQX&lt;/a&gt;&lt;/p&gt;</description>
				<pubDate>Tue, 13 Mar 2012 00:00:00 -0600</pubDate>
				<link>http://andyvanee.com/2012/03/13/copy-path-to-clipboard.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2012/03/13/copy-path-to-clipboard.html</guid>
			</item>
		
			<item>
				<title>Global Day of Code Retreat</title>
				<description>&lt;p&gt;This past weekend my co-worker, Jon, and I participated in the Global Day of Code Retreat, an event that focuses on two things: Test-Driven Development (TDD) and Pair Programming.&lt;/p&gt;

&lt;p&gt;Neither of which are exactly new to me, but in my day-to-day work there are only a handful of projects that use TDD, and we basically never do pair-programming. We collaborate, but never really in front of the same computer for any length of time.&lt;/p&gt;

&lt;p&gt;The format was somewhat maddening for anyone that likes to see results from their efforts which I&amp;#8217;m guessing is everyone. You get 45 minute sessions, each with a new pairing, each with some new constraints, and each potentially a new programming language to solve a problem that is completely unsolvable in that span of time: Conway&amp;#8217;s Game Of Life. And after each session the code must be deleted.&lt;/p&gt;

&lt;p&gt;My first suprise of the day was the representation of programming languages: of about 20 participants, all were either Java or C# guys, with the exception of one Perl guy and us. I thought I would find more common ground, having decent experience with PHP, Python, Javascript (Node), Ruby and Objective-C. But no. The average programmer in Calgary is thorougly entrenched in either Java or C#, often without any experience whatsoever in the languages of the web and sysadmin fields.&lt;/p&gt;

&lt;p&gt;I ended up faking my way through C# for 4 out of 6 sessions. The C heritage makes it fairly easy to guess the basics, and in 45 minutes, you can&amp;#8217;t really test the limits of a language. The other 2 sessions were with Node &amp;amp; Ruby respectively, and they had their own problems.&lt;/p&gt;

&lt;p&gt;In node, I had a outline for a TDD type project, but it turns out some of the core stuff (requires etc.) has changed since using it last and I spent probably 15 minutes actually getting the project running. In the ruby session we decided to forget the test library completely and use a single file with the classes and run the test functions within it. Worked well enough, though I actually had a harder time jumping into Ruby syntax initially than C#! That was bizarre to me.&lt;/p&gt;

&lt;p&gt;Two of the &amp;#8220;programming constraints&amp;#8221; stick with me and I&amp;#8217;d like to outline why:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1) No methods longer than 4 lines.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is really hard! It really forces you to decompose the logic of your code into bite sized chunks. It also makes it really easy to check your logic at every step with test coverage.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2) No if/else/switch/case&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This one is even harder, and I think i&amp;#8217;m still learning the lesson within it. The way I see it is that it formalizes your comparison and conditional branching. We started by getting around it with some ugly boolean comparisons. But when we were forced to make a true conditional branch, it started to become clear. The solution we came up with, in C#, was to create a mapping of functions with a boolean key. Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true -&amp;gt; MethodToCall()
false -&amp;gt; OtherMethodToCall()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to do this, you also must create an interface that each of these methods implements. This takes what would have been a block of inline code and creates hooks that you could call and test independently of the code that is calling it. That&amp;#8217;s pretty awesome actually.&lt;/p&gt;

&lt;p&gt;All in all, it was a pretty good day. The language barriers were a bit tough, but it&amp;#8217;s good exposure to see how other people work.&lt;/p&gt;</description>
				<pubDate>Wed, 07 Dec 2011 00:00:00 -0700</pubDate>
				<link>http://andyvanee.com/2011/12/07/global-day-of-code-retreat.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2011/12/07/global-day-of-code-retreat.html</guid>
			</item>
		
			<item>
				<title>Guru Graduate!</title>
				<description>&lt;p&gt;Well, today was my last day at &lt;a href='http://www.gurudigitalarts.com/'&gt;Guru Digital Arts College&lt;/a&gt;. It&amp;#8217;s been an amazing six months! I had a great feeling about the school from the day I walked in for a tour, and they didn&amp;#8217;t disappoint.&lt;/p&gt;

&lt;p&gt;The staff at Guru were a fantastic bunch: passionate about providing the best education possible for students with a wide range of talents and goals. They provided sage advice on project management and the business as well as hands-on practical instruction on the tools and techniques.&lt;/p&gt;

&lt;p&gt;The education was highly tailored to my skill set. After a whirlwind tour of Adobe CS to make sure I was up to speed, I jumped on to a couple projects focusing on client-side JavaScript. They also brought in a great guest instructor to get some good hands on experience with developing iOS apps with Objective-C. In the latter half of the program, I started working more with server-side technologies. I worked with CouchDB, Google App Engine and Ruby on Rails; integrating them with, and further developing my knowledge of iOS and client-side JavaScript.&lt;/p&gt;

&lt;p&gt;I presented my portfolio to a panel of industry professionals today, and the feedback was great. It was awesome to be able to present it and see what aspects really resonate with people.&lt;/p&gt;

&lt;p&gt;But this isn&amp;#8217;t the end, it&amp;#8217;s only the beginning. The reason I built this site to be dynamic and extensible is because I plan to keep growing, learning and building cool stuff, and I want to share it with the world!&lt;/p&gt;</description>
				<pubDate>Fri, 04 Mar 2011 00:00:00 -0700</pubDate>
				<link>http://andyvanee.com/2011/03/04/guru-graduate.html</link>
				<guid isPermaLink="true">http://andyvanee.com/2011/03/04/guru-graduate.html</guid>
			</item>
		
	</channel>
</rss>
